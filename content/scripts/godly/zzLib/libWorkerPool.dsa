/**
*
Usage:
const nCores = 3;
var workers = new WorkerPool(nCores, backgroundWorker);
workers.go("stringParam");
function backgroundWorker(str) {
		print("backgroundWorker: " + str);
}
*
* TODO: protect vars properly
*/
var ao_Timer = new Array(this.nCores);
var ao_TimerParam = new Array(this.nCores);
var ab_TimerIdle = new Array(nCores);

function WorkerPool(nCores, fCallBack) {
	this.nCores = nCores;
	this.fCallBack = fCallBack;
	// create timers
	function createTimers() {
		for (var i=0; i<nCores; i++) {
			ao_Timer[i] = new DzTimer();
			ao_TimerParam[i] = '';
			ao_Timer[i].singleShot = true;
			(function(j) {
				ao_Timer[i].timeout.connect(
					function(){ 
						runTimer(fCallBack, j); // runTimer(0), runTimer(1), ...
					}
				);
			})(i);
			ab_TimerIdle[i] = true;
		}
	}
	createTimers();
}
WorkerPool.prototype.getTimerId = function() {
	// not thread safe
	while(true) {
		for (var i=0; i<nCores; i++) {
			if (ab_TimerIdle[i] == true) {
				ab_TimerIdle[i] = false;
				return i;
			}
		}
		// all timers are busy
		processEvents();
	}
}
/*WorkerPool.prototype.freeTimerId = function(nrTimer) {
	ab_TimerIdle[nrTimer] = true;
}*/
function freeTimerId(nrTimer) {
	ab_TimerIdle[nrTimer] = true;
}

function runTimer(fCallBack, nrTimer) {
	fCallBack(nrTimer, ao_TimerParam[nrTimer]);
	freeTimerId(nrTimer);
}
WorkerPool.prototype.go = function(strParam) {
	var nrTimer = this.getTimerId();
	ao_TimerParam[nrTimer] = strParam;
	ao_Timer[nrTimer].start(nrTimer); 
}
// TODO deleteTimer
