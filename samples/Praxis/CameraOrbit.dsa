// CameraOrbit.dsa
// DAZ Studio 4 script to demonstrate one way to Orbit a camera around a point.
// Posted to DAZ Script Developer forum by Praxis on 09-May-2016
//****************************************************************************

//---The usual legal stuff---
// You can use this script freely for personal or commercial use.
// It is provided without any obligation for maintenance or support by the author.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

//****************************************************************************


//============================================================================
// To minimize pollution of the script global namespace,
//  use an anonymous function as this script's Main Routine:
//  This limits the scope of the rest of this script's variables, etc.
//  to just this script.
( function() {
//****************************************************************************

  //============================================================================
  //---Utilities---
  //============================================================================

  // Useful constants that we calculate once only:
  var g_nPi             = Math.PI;
  var g_nHalfPi         = g_nPi * 0.5;
  var g_n2Pi            = g_nPi * 2;
  var g_n1div2Pi        = 1 / g_n2Pi;

  // Any Number having Math.abs() value less that this we sometimes treat as "equivalent to Zero":
  var g_nUtyAlmostZero  = 0.000001;

  //------------------------------------

  function  utyShowInfo( p_sMsg )     // : void
  {
    MessageBox.information( p_sMsg, "Camera Orbit", "&OK", "" );
  };

  //------------------------------------

  var g_nUtyDegToRadFactor = ( g_nPi / 180 );     // For efficiency, calculate this just once

  function  utyDegToRad( p_nValue )     // : Number
  {
    // Convert Degrees to Radians
    return  p_nValue * g_nUtyDegToRadFactor;
  };

  //------------------------------------

  var g_nUtyRadToDegFactor = ( 180 / g_nPi );     // For efficiency, calculate this just once

  function  utyRadToDeg( p_nValue )     // : Number
  {
    // Convert Radians to Degrees
    return  p_nValue * g_nUtyRadToDegFactor;
  };

  //------------------------------------

  function  utyNormalizePi( p_nAngleRad )         // : Number (radians)
  {
    // Convert p_nAngleRad to be in our "canonical" range: -PI .. PI:

    var nResult         = p_nAngleRad;

    if(  ( nResult < -g_nPi )
      || ( nResult >  g_nPi )
      ) {
      // Add or subtract the relevant multiple of (2 * PI):
      nResult           = nResult + g_nPi;
      nResult           = nResult - ( ( Math.floor( nResult * g_n1div2Pi ) * g_n2Pi ) );
      nResult           = nResult - g_nPi;
    }

    return nResult;
  };

  //------------------------------------

  function  utyCartesianToSpherical( p_vVec       // : DzVec3     // [ X       , Y        , Z      ] Cartesian coordinates
                                   )              // : DzVec3     // [ Latitude, Longitude, Radius ] Spherical coordinates
  {
    // Ref_1: Wikipedia: Spherical coordinate system
    //  https://en.wikipedia.org/wiki/Spherical coordinate system - Wikipedia, the free encyclopedia.htm

    // Note \\\Conventions:
    // --------------------
    //  Cartesian coordinates of a Point on the surface of a Sphere:
    //    X, Y, Z are per DAZ Studio conventions.
    //  Spherical coordinates of a Point on the surface of a Sphere:
    //    There are many different conventions for Spherical coordinates.
    //      We use these because they are familiar from maps of the Earth:
    //    Longitude:
    //      The angle in the XZ plane between the Z-Axis and the projection of the Point's vector from the center onto the XZ plane.
    //      Range is -PI to PI, i.e. -180 to 180 degrees.
    //      Positive is clockwise when viewed in the direction of the positive Y-Axis (from the Center towards he North Pole).
    //        i.e. Longitude East is positive
    //        i.e. Longitude West is negative
    //        This matches the operation of the Orbit control in the DAZ Studio Viewport.
    //    Latitude:
    //      Is the angle between the XZ plane and the Point's vector from the center, which is equivalent to:
    //      The angle in the XY plane between the X-Axis and the Point's vector from the center,
    //        if the Point were Orbited at constant Latitude to have Longitude = -90 degrees.
    //      Positive is clockwise when viewed in the direction of the positive Z-Axis.
    //        i.e. Latitude North is positive
    //        i.e. Latitude South is negative
    //        This matches the operation of the Orbit control in the DAZ Studio Viewport.
    //    Radius:
    //      Radius of Sphere = sqrt( sqr(x) + sqr(y) +sqr(z) )
    //  When stored in a DzVec3:
    //    DzVec3.x  contains X or Latitude
    //    DzVec3.y  contains Y or Longitude
    //    DzVec3.z  contains Z or Radius

    var nLatitude       = 0;
    var nLongitude      = 0;

    // Radius of Sphere = sqrt( sqr(x) + sqr(y) +sqr(z) ):
    var nSqrXplusSqrZ   = ( p_vVec.x * p_vVec.x ) + ( p_vVec.z * p_vVec.z );
    var nRadius         = Math.sqrt( nSqrXplusSqrZ + ( p_vVec.y * p_vVec.y ) );

    if( nRadius < g_nUtyAlmostZero ) {          // Or < 0
      // Invalid, or degenerate case
      //  Reset/Default to safe values:
      nLatitude         = 0;
      nLongitude        = 0;
      nRadius           = 1;

    } else {

      // Math.atan2() caters for p_vVec.z == 0:
      // See Note \\\Conventions: Longitude_East is positive:
      nLongitude      = Math.atan2( p_vVec.x, p_vVec.z );       // -PI .. PI : -180 .. 180 degrees

      if( Math.abs( p_vVec.y ) < g_nUtyAlmostZero ) {
        nLatitude       = 0;                    // On the Equator
      } else {
        // We must prevent DivideByZero here when nSqrXplusSqrZ == 0:
        // Math.sqrt( nSqrXplusSqrZ ) is the projection of the Point's vector onto the XZ plane:
        if( Math.abs( nSqrXplusSqrZ ) < g_nUtyAlmostZero ) {
          // The Point is on the Y-Axis:
          //  NB: nLongitude can be anything - potential for gimbal lock.
          if( p_vVec.y < 0 ) {
            nLatitude   = - g_nHalfPi;          // At the South Pole: -90 degrees
          } else {
            nLatitude   =   g_nHalfPi;          // At the North Pole:  90 degrees
          }
        } else {
          nLatitude     = Math.atan( p_vVec.y / Math.sqrt( nSqrXplusSqrZ ) );     // -PI/2 .. PI/2 : -90..90 degrees
        }
      }

    } // General case

    // Ensure that nLongitude is in our "canonical" range: -PI .. PI:
    nLongitude          = utyNormalizePi( nLongitude );

    // Ensure that nLatitude is in our "canonical" range: -PI/2 .. PI/2:
    nLatitude           = utyNormalizePi( nLatitude );    // Convert to -PI .. PI
    if(        nLatitude >  g_nHalfPi ) {
      // Invalid: Correct it
      nLatitude         =  g_nHalfPi;
    } else if( nLatitude < -g_nHalfPi ) {
      // Invalid: Correct it
      nLatitude         = -g_nHalfPi;
    }

    var nResult         = new DzVec3;
    nResult.x           = nLatitude;
    nResult.y           = nLongitude;
    nResult.z           = nRadius;

    return nResult;
  };  // utyCartesianToSpherical()

  //------------------------------------

  function  utyCartesianFromSpherical( p_vTriVal    // : DzVec3   // [ Latitude, Longitude, Radius ] Spherical coordinates
                                     )              // : DzVec3   // [ X       , Y        , Z      ] Cartesian coordinates
  {
    // Ref_1: Wikipedia: Spherical coordinate system
    //  https://en.wikipedia.org/wiki/Spherical coordinate system - Wikipedia, the free encyclopedia.htm

    var nResult         = new DzVec3( 0, 0, 0 );

    // See Note \\\Conventions:
    var nLatitude       = p_vTriVal.x;
    var nLongitude      = p_vTriVal.y;
    var nRadius         = p_vTriVal.z;

    if( Math.abs( nRadius ) < g_nUtyAlmostZero ) {
      // Invalid, or degenerate case
      //  Reset/Default to safe values:
      nResult.x         = 0;
      nResult.y         = 0;
      nResult.z         = 1;

    } else {

      // Y = Radius * sin( Latitude );
      // See utyCartesianToSpherical():
      //  Ensure that nLatitude is in our "canonical" range: -PI/2 .. PI/2:
      nLatitude         = utyNormalizePi( nLatitude );    // Convert to -PI .. PI
      if(        nLatitude >  g_nHalfPi ) {
        // Invalid: Correct it
        nLatitude       =  g_nHalfPi;
      } else if( nLatitude < -g_nHalfPi ) {
        // Invalid: Correct it
        nLatitude       = -g_nHalfPi;
      }
      nResult.y         = nRadius * Math.sin( nLatitude );

      // Ensure that nLongitude is in our "canonical" range: -PI .. PI:
      nLongitude        = utyNormalizePi( nLongitude );

      // See Note \\\Conventions:
      //  Comparing with Ref_1 = https://en.wikipedia.org/wiki/Spherical coordinate system - Wikipedia, the free encyclopedia.htm
      //    Ref_1 Z is North,
      //      but we use Y as North.
      //    Ref_1 measures Azimuth Phi from the X-Axis,
      //      but we measure Longitude from the Z-Axis.
      //    Ref_1 Theta is Inclination from North,
      //      but our Latitude is Elevation from the Equatorial plane,
      //      so we use cos( Latitude ) instead of sin( Theta ) like Ref_1.
      //
      var nCosLatitude  = Math.cos( nLatitude );
      nResult.x         = nRadius * Math.sin( nLongitude ) * nCosLatitude;
      nResult.z         = nRadius * Math.cos( nLongitude ) * nCosLatitude;

    } // General case

    return nResult;
  };  // utyCartesianFromSpherical()

  //------------------------------------

  function utyGetViewportMgr()        // : DzViewportNgr
  {
    return MainWindow.getViewportMgr();
  };

  //------------------------------------

  function utyGetActiveViewport()     // : DzViewport
  {
    return utyGetViewportMgr().getActiveViewport();
  };

  //------------------------------------

  function utyGetActive3DViewport()   // : Dz3DViewport
  {
    return utyGetActiveViewport().get3DViewport();
  };

  //------------------------------------

  function utyGetActiveCamera()       // : DzCamera
  {
    return utyGetActive3DViewport().getCamera();
  };

  //------------------------------------

  function  utyExecuteAction( p_sActionID )   // : Boolean
  {
    var oAction           = MainWindow.getActionMgr().findAction( p_sActionID );
    if( oAction ) {
      oAction.trigger();
      return true;
    } else {
      return false;
    }
  };


  //============================================================================
  //---Build the dialog---
  //============================================================================

  // Script Globals:
  var g_bInitialized      = false;
  var g_oCamera           = undefined;                  // : DzCamera   The Camera that we will control
  var g_vOrbitPos         = new DzVec3( 0, 100, 0 );    // The Point in World Space that we will Orbit

  var
  wDialog                 = new DzDialog( MainWindow );
  wDialog.caption         = "Camera Orbit Control";
  wDialog.width           = 400;

  var
  wDialogLayout           = new DzVBoxLayout( wDialog );
  wDialogLayout.autoAdd   = true;

  // Camera Y-Orbit Angle = Longitude:
  var
  wCamOrbitYSlider              = new DzFloatSlider( wDialog );
  wCamOrbitYSlider.label        = "Longitude (degrees):";
  wCamOrbitYSlider.labelVisible = true;
  wCamOrbitYSlider.max          =  180;
  wCamOrbitYSlider.min          = -180;
  wCamOrbitYSlider.clamped      = true;
  wCamOrbitYSlider.sensitivity  = 1;
  wCamOrbitYSlider.valueChanged.connect( dlgProcessCamOrbitSliderChanged );   // Same event-handler for Y and X

  // Camera X-Orbit Angle = Latitude:
  var
  wCamOrbitXSlider              = new DzFloatSlider( wDialog );
  wCamOrbitXSlider.label        = "Latitude (degrees):";
  wCamOrbitXSlider.labelVisible = true;
  wCamOrbitXSlider.max          =  90;
  wCamOrbitXSlider.min          = -90;
  wCamOrbitXSlider.clamped      = true;
  wCamOrbitXSlider.sensitivity  = 1;
  wCamOrbitXSlider.valueChanged.connect( dlgProcessCamOrbitSliderChanged );   // Same event-handler for Y and X

  // Camera Orbit Radius:
  var
  wCamRadiusSlider              = new DzFloatSlider( wDialog );
  wCamRadiusSlider.label        = "Radius (cm):";
  wCamRadiusSlider.labelVisible = true;
  wCamRadiusSlider.max          = 10000;
  wCamRadiusSlider.min          = 1;
  wCamRadiusSlider.clamped      = true;
  wCamRadiusSlider.sensitivity  = 1;
  wCamRadiusSlider.valueChanged.connect( dlgProcessCamRadiusSliderChanged );

  // Camera Reset:
  var
  wCamResetButton       = new DzPushButton( wDialog );
  wCamResetButton.text  = "Reset the Camera to defaults";
  wCamResetButton.clicked.connect( dlgProcessCamReset );

  //----------------------------------

  function  dlgInitialize()   // : void
  {
    // Initialize the controls from the Scene:

    //---Get the Camera to control---

    // If there is a visible Perspective Camera labelled "Orbit-Camera" then use it:
    g_oCamera           = Scene.findCameraByLabel( "Orbit-Camera" );
    if( g_oCamera ) {
      // Cannot Orbit an Ortho Camera:
      if(  ( g_oCamera.type == DzCamera.PERSPECTIVE_CAMERA )
        || ( g_oCamera.type == DzCamera.GENERAL_CAMERA )
        ) {
        if( !g_oCamera.isVisible() ) {    // Let User enable/disable it via its Visibility
          g_oCamera     = undefined;
        }
      } else {
        g_oCamera       = undefined;
      }
    }

    if( !g_oCamera ) {
      // Default: Use the built-in Perspective Camera
      utyExecuteAction( "DzPerspectiveViewAction" );
      g_oCamera         = utyGetActiveCamera();
      if( g_oCamera ) {
        // Cannot Orbit an Ortho Camera:
        if(  ( g_oCamera.type == DzCamera.PERSPECTIVE_CAMERA )
          ) {
          // OK
        } else {
          g_oCamera     = undefined;
        }
      }
    }

    if( !g_oCamera ) {
      utyShowInfo( "If you create a visible Perspective Camera labelled 'Orbit-Camera' then it will be used. \n"
                 + "  (Set its 'General > Misc > Point At' property to 'None')."
                 );
    } else {

      //---Get the Orbit Point---
      // If there is a visible Node labelled "Orbit-Point" then use it:
      var oNode         = Scene.findNodeByLabel( "Orbit-Point" );
      if( oNode && oNode.isVisible() ) {      // Let User enable/disable it via its Visibility
        g_vOrbitPos     = oNode.getWSPos();
      } else {
        // Leave g_vOrbitPos per its initial default.
        utyShowInfo( "If you create a visible Node labelled 'Orbit-Point' \n"
                   + "then it will be used as the point to Orbit instead of the default."
                   );
      }


      //---Load data from the Scene---
      dlgLoadControlsFromScene();

      g_bInitialized    = true;

    } // Got a Camera OK

  };  // dlgInitialize()

  //----------------------------------

  function dlgLoadControlsFromScene()   // : void
  {
    if( g_oCamera ) {
      // Inverse of dlgProcessCamOrbitSliderChanged():

      // Get the Camera position in Spherical coordinates:
      //  Convert from [ X       , Y        , Z      ] Cartesian coordinates
      //            to [ Latitude, Longitude, Radius ] Spherical coordinates
      var vTriVal       = utyCartesianToSpherical( g_oCamera.getWSPos() );

      wCamOrbitYSlider.value  = utyRadToDeg( vTriVal.y );   // Longitude
      wCamOrbitXSlider.value  = utyRadToDeg( vTriVal.x );   // Latitude
      wCamRadiusSlider.value  =              vTriVal.z  ;   // Radius

    }
  };  // dlgLoadControlsFromScene()

  //----------------------------------

  function dlgProcessCamReset()   // : void
  {
    if( g_oCamera ) {
      // Reset the Camera to our default state:
      //  Similar to the .reset() values for the built-in Perspective Camera:
      wCamOrbitYSlider.value  =  25.55;   // Longitude
      wCamOrbitXSlider.value  =  21.40;   // Latitude
      wCamRadiusSlider.value  = 440.48;   // Radius
    }
  };  // dlgProcessCamReset()

  //----------------------------------

  function dlgProcessCamOrbitSliderChanged()  // : void
  {
    // Event handler for a change in OrbitY or OrbitX controls.
    if( g_oCamera && g_bInitialized ) {
      // Orbit the Camera about the OrbitPoint:

      // There are a number of different ways to do this.
      //  This way is relatively simple and intuitive:

      // Convert Orbit Angles in degrees (-180.0 .. 180.0) to radians (-pi .. pi):
      var nLongitude    = utyDegToRad( wCamOrbitYSlider.value );
      var nLatitude     = utyDegToRad( wCamOrbitXSlider.value );

      // Position of the Camera if it were Orbiting [0,0,0] instead of g_vOrbitPos:
      var vNewPos       = g_oCamera.getWSPos().subtract( g_vOrbitPos );

      // Position of the Camera in Spherical coordinates centered at [0,0,0]:
      //  Convert from [ X       , Y        , Z      ] Cartesian coordinates
      //            to [ Latitude, Longitude, Radius ] Spherical coordinates
      var vTriVal       = utyCartesianToSpherical( vNewPos );

      // Retain fixed Radius, set new Latitude and Longitude:
      vTriVal.x         = nLatitude;
      vTriVal.y         = nLongitude;

      // New position on the Sphere when centered at [0,0,0]:
      var vNewPos       = utyCartesianFromSpherical( vTriVal );

      // Position on the Sphere when centered at g_vOrbitPos:
      vNewPos           = vNewPos.add( g_vOrbitPos );

      // Apply the new position:
      g_oCamera.setWSPos( vNewPos );

      // Re-Orient the Camera to point at the OrbitPoint again:
      g_oCamera.aimAt( g_vOrbitPos );

    } // We have a Camera
  };  // dlgProcessCamOrbitSliderChanged()

  //----------------------------------

  function  dlgProcessCamRadiusSliderChanged()    // : void
  {
    if( g_oCamera && g_bInitialized ) {
      // Change the Radius of the Camera's Orbit:

      // There are a number of different ways to do this.
      //  This way is relatively simple and intuitive:

      // Position of the Camera if it were Orbiting [0,0,0] instead of g_vOrbitPos:
      var vNewPos       = g_oCamera.getWSPos().subtract( g_vOrbitPos );

      // Position of the Camera in Spherical coordinates centered at [0,0,0]:
      //  Convert from [ X       , Y        , Z      ] Cartesian coordinates
      //            to [ Latitude, Longitude, Radius ] Spherical coordinates
      var vTriVal       = utyCartesianToSpherical( vNewPos );

      // Retain fixed Latitude and Longitude, set new Radius:
      vTriVal.z         = wCamRadiusSlider.value;

      // Position on the new Sphere centered at [0,0,0]:
      var vNewPos       = utyCartesianFromSpherical( vTriVal );

      // Position on the Sphere when centered at g_vOrbitPos:
      vNewPos           = vNewPos.add( g_vOrbitPos );

      // Apply the new position:
      g_oCamera.setWSPos( vNewPos );

    } // We have a Camera
  };  // dlgProcessCamRadiusSliderChanged()


  //============================================================================
  //---Main Routine---
  //============================================================================

  // Initialize the dialog:
  dlgInitialize();

  if( g_oCamera ) {         // Loaded a Camera OK
    // Launch the dialog:
    wDialog.exec();
  }


//****************************************************************************
// Finalize the anonymous function, and immediately invoke it as this script's Main Routine:
} ) ();
